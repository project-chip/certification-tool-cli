
 #
 # Copyright (c) 2023 Project CHIP Authors
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 # http://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
[project]
name = "th_cli"
version = "0.1.0"
description = "Test Harness CLI tool for CSA Matter certification"
authors = [
    {name = "Project CHIP Authors", email = "certification-tool@project-chip.org"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.10,<4.0"
keywords = ["Matter", "CSA", "testing", "certification", "IoT"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "httpx>=0.15.4,<0.19.0",
    "attrs>=20.1.0,<22.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
    "websockets>=10.0,<11.0",
    "click>=8.0.1,<9.0.0",
    "pydantic>=1.4,<2.0",
    "types-click>=7.1.5,<8.0.0",
    "fastapi>=0.68.1,<1.0.0",
    "loguru>=0.5.3,<1.0.0",
    "aioconsole>=0.3.2,<1.0.0",
    "PyYAML>=6.0.1,<7.0.0",
    "tomli>=1.2.0,<3.0.0",
]

[project.scripts]
th-cli = "th_cli.main:root"

[tool.poetry]
packages = [
    {include = "th_cli"},
    {include = "commands", from = "th_cli"},
    {include = "api_lib_autogen", from = "th_cli"},
]

[tool.poetry.group.dev.dependencies]
mypy = "^1.2.0"
black = "^22.3.0"
isort = "^5.12.0"
autoflake = "^2.1.1"
flake8 = "^6.0.0"
types-python-dateutil = "^2.8.0"
safety = "^2.3.0"  # Security vulnerability scanning
pip-audit = "^2.6.0"  # Alternative security scanner
pipdeptree = "^2.13.0"  # Dependency tree visualization
pytest = "^7.4.0"  # Testing framework
pytest-cov = "^4.1.0"  # Coverage plugin for pytest
pytest-mock = "^3.11.1"  # Mock plugin for pytest
pytest-asyncio = "^0.21.1"  # Async support for pytest
pytest-click = "^1.1.0"  # Click testing utilities
pytest-xdist = "^3.3.1"  # Parallel test execution
faker = "^19.3.0"  # Generate fake data for testing

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.black]
line-length = 120
exclude = '''
/(
  | .git
  | __pycache__
  | __init__.py
  | .mypy_cache
  | .pytest_cache
  | .venv
  | client_generator
)/
'''

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=th_cli",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-branch",
    "--cov-fail-under=85",
    "-ra",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "cli: CLI command tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["th_cli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/api_lib_autogen/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == \"__main__\":",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry.core"]
build-backend = "poetry.core.masonry.api"
